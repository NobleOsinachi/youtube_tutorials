//SPDX-License-Identifier: UNLICENSED
pragma solidity 0.7.5;
import "@openzeppelin/contracts3/math/SafeMath.sol";


contract ArithmeticSurvivorV7{
    using SafeMath for uint8; 
    mapping (address=>bool) _members;
    mapping (address=>uint8) _loans;

    function joinCollective() public payable{
        _members[msg.sender] = true;
    }

    function repay(uint8 amount) public payable{
        require(_loans[msg.sender]>0, "You do not have any outstanding loans");
        require(msg.value>0, "Please deposit some ETH");
        require(msg.value==amount, "Please deposit the same amount as you specified");
        
        
        if(_loans[msg.sender]<=amount){
            // WARNING: The following  block is for demonstration purposes and introduces potential underflow vulnerabilities.
            uint remainder = _loans[msg.sender].sub(amount); //attacker can pretend to repay loan by causing an underflow
            uint8 remainderCast = uint8(remainder);

            require(remainderCast==remainder, "underflow occurred");
            _loans[msg.sender] = 0;
            
            (bool sent, ) = msg.sender.call{value: remainder}("");
            require(sent, "Failed to send remainder");
        }else{
            uint8 newLoanAmount = uint8(_loans[msg.sender].sub(amount));
            _loans[msg.sender] = newLoanAmount;
        }
    }

    function borrow(uint8 amount) public{
        require(_members[msg.sender]==true, "Join the collective first");
        require(address(this).balance>=amount, "Not enough money in the collective");
        // WARNING: The following block is for demonstration purposes and introduces potential underflow vulnerabilities.

        uint result = _loans[msg.sender].add(amount);
        uint8 resultCast = uint8(result);
        require(result == resultCast, "Loan value exceeds uint8 limit");

        _loans[msg.sender] = resultCast;

        (bool sent, ) = msg.sender.call{value: amount}("");
        require(sent, "Failed to send Ether");
    }

    function getLoanAmount(address member) public view returns(uint8){
        return _loans[member];
    }

    //anyone can donate funds to the collective
    function donate() public payable{
    }

    function getTotalDonations() public view returns(uint256) {
        return address(this).balance;
    }
}