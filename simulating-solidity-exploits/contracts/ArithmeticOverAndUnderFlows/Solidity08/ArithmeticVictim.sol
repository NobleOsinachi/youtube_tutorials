//SPDX-License-Identifier: UNLICENSED
pragma solidity 0.8.19;
import "@openzeppelin/contracts/security/ReentrancyGuard.sol";


contract ArithmeticVictim is ReentrancyGuard{ 
    mapping (address=>bool) _members;
    mapping (address=>uint8) _loans;

    function joinCollective() public payable{
        _members[msg.sender] = true;
    }

    function repay(uint8 amount) public payable nonReentrant(){
        require(_loans[msg.sender]>0, "You do not have any outstanding loans");
        require(msg.value>0, "Please deposit some ETH");
        require(msg.value==amount, "Please deposit the same amount as you specified");
        
        if(_loans[msg.sender]<=amount){
            _loans[msg.sender] = 0;
            // WARNING: The following unchecked block is for demonstration purposes and introduces potential underflow vulnerabilities.
            unchecked {
                uint8 remainder = _loans[msg.sender] - amount; //attacker can pretend to repay loan by causing an underflow
                (bool sent, ) = msg.sender.call{value: remainder}("");
                require(sent, "Failed to send remainder");
            }
        }else{
            _loans[msg.sender] -= amount;
        }
    }

    function borrow(uint8 amount) public nonReentrant(){
        require(_members[msg.sender]==true, "Join the collective first");
        require(address(this).balance>=amount, "Not enough money in the collective");
        // WARNING: The following unchecked block is for demonstration purposes and introduces potential underflow vulnerabilities.
        unchecked {
            _loans[msg.sender] += amount; //attacker can receiver more than the recorded loan by causing an overflow
        }
        (bool sent, ) = msg.sender.call{value: amount}("");
        require(sent, "Failed to send Ether");
    }

    function getLoanAmount(address member) public view returns(uint8){
        return _loans[member];
    }

    //anyone can donate funds to the collective
    function donate() public payable{
    }

    function getTotalDonations() public view returns(uint256) {
        return address(this).balance;
    }
}