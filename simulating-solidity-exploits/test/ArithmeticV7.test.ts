import {loadFixture} from "@nomicfoundation/hardhat-toolbox/network-helpers";
import {expect} from 'chai';
import { ethers } from "hardhat";

describe("Arithmetic", function(){
    async function deployArithmeticVictim(){
    
        const Victim = await ethers.getContractFactory("ArithmeticVictimV7");
        const victim = await Victim.deploy();
  
        const Attacker = await ethers.getContractFactory("ArithmeticAttackerV7");
        const attacker = await Attacker.deploy(await victim.getAddress());
  
      
        return { victim, attacker};
    }

    async function deployArithmeticSurvivor(){
    
        const Survivor = await ethers.getContractFactory("ArithmeticSurvivorV7");
        const survivor = await Survivor.deploy();
  
        const Attacker = await ethers.getContractFactory("ArithmeticAttackerV7");
        const attacker = await Attacker.deploy(await survivor.getAddress());
  
      
        return { survivor, attacker};
    }


    describe("Attacing Victim", async function () {
        it("can cause overflow attack to borrow 257 wei with a loan amount of only 1 wei to repay", async function () {
            const { victim, attacker } = await loadFixture(deployArithmeticVictim);

            (await victim.donate({ value: 257 })).wait();

            (await attacker.attackWithOverflow()).wait();

            expect(await victim.getLoanAmount(attacker.getAddress())).to.equal(1);

        });

        it("can cause underflow attack to borrow 1 wei and receive 255 wei when it repays", async function () {
            const { victim, attacker } = await loadFixture(deployArithmeticVictim);
            
            (await victim.donate({ value: 256 })).wait();

            (await attacker.attackWithUnderflow({value:2})).wait();

            expect(await victim.getLoanAmount(attacker.getAddress())).to.equal(0);
            expect (await ethers.provider.getBalance(attacker.getAddress())).to.equal(255);
        });
    });

    describe("Attacking the Survivor", async function () {
        it("cannot cause overflow attack to borrow 257 wei with a loan amount of only 1 wei to repay", async function () {
            const { survivor, attacker } = await loadFixture(deployArithmeticSurvivor);

            (await survivor.donate({ value: 257 })).wait();

            expect(attacker.attackWithOverflow()).to.be.revertedWith("Loan value exceeds uint8 limit");

        });

        it("cannot cause underflow attack to borrow 1 wei and receive 255 wei when it repays", async function () {
            const { survivor, attacker } = await loadFixture(deployArithmeticSurvivor);
            
            (await survivor.donate({ value: 256 })).wait();

            await expect ( attacker.attackWithUnderflow({value:2})).to.be.reverted;
        });
    });
});